61d6a9c
[1mFAIL[0m [1minvalid/datetime/time-no-leads[0m
[1m [0m    Expected an error, but no error was reported.

[1m     input sent to parser-cmd:[0m
       # Leading 0 is always required.
       d = 1:32:00

[1m     output from parser-cmd (stdout):[0m
       {
         "d": {
           "type": "time-local",
           "value": "01:32:00"
         }
       }

[1m     want:[0m
       Exit code 1

[1mFAIL[0m [1minvalid/inline-table/add[0m
[1m [0m    Expected an error, but no error was reported.

[1m     input sent to parser-cmd:[0m
       a={}
       # Inline tables are immutable and can't be extended
       [a.b]

[1m     output from parser-cmd (stdout):[0m
       {
         "a": {
           "b": {}
         }
       }

[1m     want:[0m
       Exit code 1

[1mFAIL[0m [1minvalid/inline-table/nested_key_conflict[0m
[1m [0m    Expected an error, but no error was reported.

[1m     input sent to parser-cmd:[0m
       tbl = { fruit = { apple.color = "red" }, fruit.apple.texture = { smooth = true } }

[1m     output from parser-cmd (stdout):[0m
       {
         "tbl": {
           "fruit": {
             "apple": {
               "color": {
                 "type": "string",
                 "value": "red"
               },
               "texture": {
                 "smooth": {
                   "type": "bool",
                   "value": "true"
                 }
               }
             }
           }
         }
       }

[1m     want:[0m
       Exit code 1

[1mFAIL[0m [1minvalid/spec/inline-table-2-0[0m
[1m [0m    Expected an error, but no error was reported.

[1m     input sent to parser-cmd:[0m
       [product]
       type = { name = "Nail" }
       type.edible = false  # INVALID

[1m     output from parser-cmd (stdout):[0m
       {
         "product": {
           "type": {
             "edible": {
               "type": "bool",
               "value": "false"
             },
             "name": {
               "type": "string",
               "value": "Nail"
             }
           }
         }
       }

[1m     want:[0m
       Exit code 1

[1mFAIL[0m [1minvalid/spec/table-9-1[0m
[1m [0m    Expected an error, but no error was reported.

[1m     input sent to parser-cmd:[0m
       [fruit]
       apple.color = "red"
       apple.taste.sweet = true
       
       # [fruit.apple]  # INVALID
       [fruit.apple.taste]  # INVALID
       
       [fruit.apple.texture]  # you can add sub-tables
       smooth = true

[1m     output from parser-cmd (stdout):[0m
       {
         "fruit": {
           "apple": {
             "color": {
               "type": "string",
               "value": "red"
             },
             "taste": {
               "sweet": {
                 "type": "bool",
                 "value": "true"
               }
             },
             "texture": {
               "smooth": {
                 "type": "bool",
                 "value": "true"
               }
             }
           }
         }
       }

[1m     want:[0m
       Exit code 1

[1mFAIL[0m [1minvalid/table/append-to-array-with-dotted-keys[0m
[1m [0m    Expected an error, but no error was reported.

[1m     input sent to parser-cmd:[0m
       [[a.b]]
       
       [a]
       b.y = 2

[1m     output from parser-cmd (stdout):[0m
       {
         "a": {
           "b": [
             {
               "y": {
                 "type": "integer",
                 "value": "2"
               }
             }
           ]
         }
       }

[1m     want:[0m
       Exit code 1

[1mFAIL[0m [1minvalid/table/append-with-dotted-keys-1[0m
[1m [0m    Expected an error, but no error was reported.

[1m     input sent to parser-cmd:[0m
       # First a.b.c defines a table: a.b.c = {z=9}
       #
       # Then we define a.b.c.t = "str" to add a str to the above table, making it:
       #
       #   a.b.c = {z=9, t="..."}
       #
       # While this makes sense, logically, it was decided this is not valid TOML as
       # it's too confusing/convoluted.
       # 
       # See: https://github.com/toml-lang/toml/issues/846
       #      https://github.com/toml-lang/toml/pull/859
       
       [a.b.c]
         z = 9
       
       [a]
         b.c.t = "Using dotted keys to add to [a.b.c] after explicitly defining it above is not allowed"

[1m     output from parser-cmd (stdout):[0m
       {
         "a": {
           "b": {
             "c": {
               "t": {
                 "type": "string",
                 "value": "Using dotted keys to add to [a.b.c] after explicitly defining it above is not allowed"
               },
               "z": {
                 "type": "integer",
                 "value": "9"
               }
             }
           }
         }
       }

[1m     want:[0m
       Exit code 1

[1mFAIL[0m [1minvalid/table/append-with-dotted-keys-2[0m
[1m [0m    Expected an error, but no error was reported.

[1m     input sent to parser-cmd:[0m
       # This is the same issue as in injection-1.toml, except that nests one level
       # deeper. See that file for a more complete description.
       
       [a.b.c.d]
         z = 9
       
       [a]
         b.c.d.k.t = "Using dotted keys to add to [a.b.c.d] after explicitly defining it above is not allowed"

[1m     output from parser-cmd (stdout):[0m
       {
         "a": {
           "b": {
             "c": {
               "d": {
                 "k": {
                   "t": {
                     "type": "string",
                     "value": "Using dotted keys to add to [a.b.c.d] after explicitly defining it above is not allowed"
                   }
                 },
                 "z": {
                   "type": "integer",
                   "value": "9"
                 }
               }
             }
           }
         }
       }

[1m     want:[0m
       Exit code 1

[1mFAIL[0m [1minvalid/table/duplicate-key-dotted-table[0m
[1m [0m    Expected an error, but no error was reported.

[1m     input sent to parser-cmd:[0m
       [fruit]
       apple.color = "red"
       
       [fruit.apple] # INVALID

[1m     output from parser-cmd (stdout):[0m
       {
         "fruit": {
           "apple": {
             "color": {
               "type": "string",
               "value": "red"
             }
           }
         }
       }

[1m     want:[0m
       Exit code 1

[1mFAIL[0m [1minvalid/table/duplicate-key-dotted-table2[0m
[1m [0m    Expected an error, but no error was reported.

[1m     input sent to parser-cmd:[0m
       [fruit]
       apple.taste.sweet = true
       
       [fruit.apple.taste] # INVALID

[1m     output from parser-cmd (stdout):[0m
       {
         "fruit": {
           "apple": {
             "taste": {
               "sweet": {
                 "type": "bool",
                 "value": "true"
               }
             }
           }
         }
       }

[1m     want:[0m
       Exit code 1

toml-test [./src/go-toml/toml-test-decoder]: using embedded tests: 405 passed, 10 failed
took 0.55s
