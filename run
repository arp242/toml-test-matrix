#!/bin/zsh
set -euC
mkdir -p src output
zmodload zsh/datetime
TIMEFMT='%*E'%K
only=

do_setup() {
	for f in ./parsers/*.zsh; do
		name=$f:t:r
		[[ -n $only && $name != $only ]] && continue

		(
			source $f

			if [[ -n $info[src] ]]; then
				(
					cd src
					if [[ ! -d $name ]]; then
						git clone $info[src] $name
					else
						(cd $name && git pull >/dev/null)
					fi
				)
				cd src/$name
			fi

			out=$(setup 2>&1)
			if [[ $? -ne 0 ]]; then
				print "Error in setup() for $f"
				print -r -- $out
				exit 1
			fi
		)
	done
}

do_run() {
	: >|output/index.html

	toml-test -cat $(( 1024 * 5 )) >|/tmp/5M.toml  # TODO: proper tmpfile

	for f in ./parsers/*.zsh; do
		name=$f:t:r
		out=output/$name.html
		[[ -n $only && $name != $only ]] && continue

		(
			print -nf '%-25s' $name
			source $f

			print "<a href='$name.html'>$name.html</a><br>" >>output/index.html

			[[ -z $info[version] ]] && info[version]=$(cd src/$name && git log -n1 --format=%h)
			print '<pre>'        >|$out
			print $info[version] >>$out

			dec=$info[decoder]
			[[ $dec[1] != '.' ]] && dec=./src/$name/$dec

			start=$EPOCHREALTIME
			toml-test -color bold $dec |& sed $'s!\x1b\\[1m!<b>!g; s!\x1b\\[0m!</b>!g' >>$out
			took=$(print -nf '%.2f' $(( $EPOCHREALTIME - $start )))

			perf=$info[perf]
			[[ $perf[1] != '.' ]] && perf=./src/$name/$perf
			if [[ -n $info[perf] ]]; then
				took_perf=$($=perf /tmp/5M.toml || print -1)
				if (( $took_perf == -1 )); then
					took_perf='(error)'
				else
					took_perf=$(print -nf '%.2f' $took_perf)
				fi
			else
				took_perf=N/A
			fi

			print "took $took $took_perf" >>$out
			print '</pre>'        >>$out

			v=($(grep -a '^  valid tests:' $out))
			iv=($(grep -a '^invalid tests:' $out))

			print -f 'pass %3d; fail %3d; took %5ss; perf %ss\n' \
				$(( $v[3] + $iv[3] )) $(( $v[5] + $iv[5] )) $took $took_perf
		)
	done
	rm -f /tmp/5M.toml
}

do_gen() {
	cat >|index.html <<-EOF
		<!DOCTYPE html>
		<html>
		<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<title>TOML test matrix</title>
		<style>
			html         { background-color:#eee; font:18px/1.5em sans-serif; }
			body         { background-color:#fff; padding:1em; max-width:80em; margin:1em auto; }
			small        { font-size:.75em; }
			table        { border-collapse:collapse; }
			td, th       { border:1px solid #d7d7d7; padding:.5em; vertical-align:top; }
			th           { font-weight:normal; text-align:left; }
			.pass        { }
			.fail        { float:right; }
			.didfail     { font-weight:bold; color:red; }
			.bench       { text-align:right; }
			a            { text-decoration:none; }
			a:hover      { text-decoration:underline; }
			.ui:visited  { color:LinkText; text-decoration:none; }
			.bars        { height:.5em; line-height:0; }
			.barp, .barf { display:inline-block; height:.5em; }
			.barp        { background:#c6c6c6; color:#fff; }
			.barf        { background:red; color:#fff; text-align:right;}
		</style>
		</head>
		<body>
		<p>This tests various parsers agains the <a href="https://github.com/toml-lang/toml-test">toml-test</a> suite.
			<a href="https://github.com/arp242/toml-test-matrix">Source</a>.
		</p>

		<p>The benchmark is a simple decode of a 5M file. Results aren't
		necessarily fair (yet), as some implementations won't do thing such as
		parsing number upon retrieval of the data.</p>

		<p>"Valid tests" are valid TOML documents given to parse. "Invalid
		tests" are invalid TOML documents the parser should reject. Failing
		invalid tests is usually less of a deal than failing valid tests.</p>

		<table>
		<thead><tr>
		<th>Name</th>
		<th>Valid tests</th>
		<th>Invalid tests</th>
		<th>Benchmark</th>
		<th></th>
		</tr></thead>
		<tbody>
	EOF

	for f in ./parsers/*.zsh; do
		name=$f:t:r
		out=output/$name.html

		source $f

		v=($(grep -a '^  valid tests:' $out))
		iv=($(grep -a '^invalid tests:' $out))

		# $(( $v[3] + $iv[3] )) $(( $v[5] + $iv[5] ))

		took=$(tail -n2 $out | grep '^took' | cut -d' ' -f3)
		[[ $took != 'N/A' ]] && took+=s
		[[ -z $info[version] ]] && info[version]=$(cd src/$name && git log -n1 --format=%h)

		vfail=""
		(( $v[5] > 0 ))  && vfail='didfail'
		ifail=""
		(( $iv[5] > 0 )) && ifail='didfail'

		failvw=0; failiw=0; passvw=100; passiw=100

		if (( $v[5] > 0 )); then
			failvw=$(( $v[5].0 / ($v[3] + $v[5]) * 100 ))
			passvw=$(( 100 - $failvw ))
		fi

		if (( $iv[5] > 0 )); then
			failiw=$(( $iv[5].0 / ($iv[3] + $iv[5]) * 100 ))
			passiw=$(( 100 - $failiw ))
		fi
		cat >>index.html <<-EOF 
			<tr>
				<td title="Version $info[version]"><a href="$info[site]">${name#*-}</a><br>
				<small>$info[lang]</small>
				</td>
				<td style="width:30em">
					<div class="bars">
						<span class="barp" style="width:$passvw%"></span><span class="barf" style="width:$failvw%"></span>
					</div>
					<small class="pass">pass: $v[3]</small>
					<span class="fail $vfail">fail: $v[5]</span>
				</td>
				<td style="width:30em">
					<div class="bars">
						<span class="barp" style="width:$passiw%"></span><span class="barf" style="width:$failiw%"></span>
					</div>
					<small class="pass">pass: $iv[3]</small>
					<span class="fail $ifail">fail: $iv[5]</span>
				</td>
				<td class="bench">$took</td>
				<td><a href="output/$name.html" class="ui">output</a></td>
			</tr>
		EOF
	done

	cat >>index.html <<-EOF
		</tbody></table>
		</body></html>
	EOF
}

only=${2:-}
case ${1:-all}; in
	setup) do_setup ;;
	run)   do_run   ;;
	gen)   do_gen   ;;
	all)   do_setup && do_run && do_gen ;;
	*)
		print "unknown step: $1"
		exit 1
esac
