#!/bin/zsh
set -euC
mkdir -p src output
zmodload zsh/datetime
TIMEFMT='%*E'%K
only=

do_setup() {
	for f in ./parsers/*.zsh; do
		name=$f:t:r
		[[ -n $only && $name != $only ]] && continue

		(
			source $f

			if [[ -n $info[src] ]]; then
				(
					cd src
					if [[ ! -d $name ]]; then
						git clone $info[src] $name
					else
						(cd $name && git pull >/dev/null)
					fi
				)
				cd src/$name
			fi

			out=$(setup 2>&1)
			if [[ $? -ne 0 ]]; then
				print "Error in setup() for $f"
				print -r -- $out
				exit 1
			fi
		)
	done
}

do_run() {
	: >|output/index.html

	toml-test -cat $(( 1024 * 5 )) >|/tmp/5M.toml  # TODO: proper tmpfile

	for f in ./parsers/*.zsh; do
		name=$f:t:r
		out=output/$name.html
		[[ -n $only && $name != $only ]] && continue

		(
			print -nf '%-25s' $name
			source $f

			print "<a href='$name.html'>$name.html</a><br>" >>output/index.html

			[[ -z $info[version] ]] && info[version]=$(cd src/$name && git log -n1 --format=%h)
			print '<pre>'        >|$out
			print $info[version] >>$out

			dec=$info[decoder]
			[[ $dec[1] != '.' ]] && dec=./src/$name/$dec

			start=$EPOCHREALTIME
			toml-test -color bold $dec |& sed $'s!\x1b\\[1m!<b>!g; s!\x1b\\[0m!</b>!g' >>$out
			took=$(print -nf '%.2f' $(( $EPOCHREALTIME - $start )))

			perf=$info[perf]
			[[ $perf[1] != '.' ]] && perf=./src/$name/$perf
			if [[ -n $info[perf] ]]; then
				took_perf=$(2>&1 time $perf /tmp/5M.toml)
				took_perf=$(print -nf '%.2f' $took_perf)
			else
				took_perf=N/A
			fi

			print "took $took $took_perf" >>$out
			print '</pre>'        >>$out

			r=($(grep -a '^toml-test' $out))
			pass=$r[6] # $(( $r[6] + $r[15] ))
			fail=$r[8] # $(( $r[8] + $r[17] ))

			print -f 'pass %3d; fail %3d; took %5ss; perf %ss\n' $pass $fail $took $took_perf
		)
	done
	rm -f /tmp/5M.toml
}

do_gen() {
	cat >|index.html <<-EOF
		<!DOCTYPE html>
		<html>
		<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<title>TOML test matrix</title>
		<style>
			html   { background-color:#eee; font:18px/1.5em sans-serif; }
			body   { background-color:#fff; padding:1em; max-width:60em; margin:1em auto; }
			table  { border-collapse:collapse; }
			td, th { border:1px solid #d7d7d7; padding:.5em; }
			th     { font-weight:normal; text-align:left; }
			.pass  { color:green; }
			.fail  { font-weight:bold; color:red; }
		</style>
		</head>
		<body>
		<p>This tests various parsers agains the <a href="https://github.com/toml-lang/toml-test">toml-test</a> suite.
			<a href="https://github.com/arp242/toml-test-matrix">Source</a>.
		</p>

		<p>The benchmark includes launching the process, reading file from disk,
		etc. The file is also fairly a-typical (no comments and very "dense").
		It's a pretty rough figure mostly intended for comparative purposes.</p>
		<table>
		<thead><tr>
		<th>Name</th>
		<th>Language</th>
		<th>TOML version</th>
		<th>Pass</th>
		<th>Fail</th>
		<th>Time to parse 5M file</th>
		<th></th>
		</tr></thead>
		<tbody>
	EOF

	for f in ./parsers/*.zsh; do
		name=$f:t:r
		out=output/$name.html

		source $f

		r=($(grep -a '^toml-test' $out))
		pass=$r[6] # $(( $r[6] + $r[15] ))
		fail=$r[8] # $(( $r[8] + $r[17] ))
		took=$(tail -n2 $out | grep '^took' | cut -d' ' -f3)
		[[ $took != 'N/A' ]] && took+=s
		[[ -z $info[version] ]] && info[version]=$(cd src/$name && git log -n1 --format=%h)

		failclass=""
		(( $fail > 0 )) && failclass=' class="fail"'
		cat >>index.html <<-EOF 
			<tr>
				<td title="Version $info[version]"><a href="$info[site]">${name#*-}</a></td>
				<td>$info[lang]</td>
				<td>$info[toml]</td>
				<td>$pass</td>
				<td $failclass>$fail</td>
				<td>$took</td>
				<td><a href="output/$name.html">full output</a></td>
			</tr>
		EOF
	done

	cat >>index.html <<-EOF
		</tbody></table>
		</body></html>
	EOF
}

only=${2:-}
case ${1:-all}; in
	setup) do_setup ;;
	run)   do_run   ;;
	gen)   do_gen   ;;
	all)   do_setup && do_run && do_gen ;;
	*)
		print "unknown step: $1"
		exit 1
esac
