#!/bin/zsh
set -euC
mkdir -p src output
zmodload zsh/datetime
TIMEFMT='%*E'%K
only=

do_setup() {
	for f in ./parsers/*.zsh; do
		name=$f:t:r
		[[ -n $only && $name != $only ]] && continue

		(
			source $f
			(( ${info[skip]:-0} )) && continue

			if [[ -n $info[src] ]]; then
				(
					print -n "$name: "
					cd src
					if [[ ! -d $name ]]; then
						git clone $info[src] $name
					else
						(cd $name && git pull ||:)
					fi
				)
				cd src/$name
			fi

			out=$(setup 2>&1)
			if [[ $? -ne 0 ]]; then
				print "Error in setup() for $f"
				print -r -- $out
				exit 1
			fi
		)
	done
}

do_run() {
	for f in ./parsers/*.zsh; do
		name=$f:t:r
		out=output/$name.html
		[[ -n $only && $name != $only ]] && continue

		(
			print -nf '%-25s' $name
			source $f
			if (( ${info[skip]:-0} )); then
				print '(skip)'
				continue
			fi

			[[ -z $info[version] ]] && info[version]=$(cd src/$name && git log -n1 --format=%h)
			perf=(0.0 0.0)
			if grep -aqs '^took ' $out; then
				perf=($(grep -a '^took ' $out))
				perf=($perf[2] $perf[3])
			fi
			print '<pre>'        >|$out
			print $info[version] >>$out

			dec=$info[decoder]
			[[ $dec[1] != '.' ]] && dec=./src/$name/$dec
			enc=$info[encoder]
			[[ $enc[1] != '.' ]] && enc=./src/$name/$enc

			start=$EPOCHREALTIME
			toml-test -color bold $dec |& sed $'s!\x1b\\[1m!<b>!g; s!\x1b\\[0m!</b>!g' >>$out
			print $'\n==> ENCODER TESTS' >>$out
			if [[ -n $info[encoder] ]] && [[ $info[encoder] != 'TODO' ]]; then
				toml-test -color bold -encoder $enc |& sed $'s!\x1b\\[1m!<b>!g; s!\x1b\\[0m!</b>!g' >>$out
			else
				print '(not supported)' >>$out
			fi
			took=$(print -nf '%.2f' $(( $EPOCHREALTIME - $start )))

			print "took $perf[1] $perf[2]" >>$out
			print '</pre>'        >>$out

			v=($(grep -a '^  valid tests:' $out))
			iv=($(grep -a '^invalid tests:' $out))
			e=($(grep -a '^encoder tests:' $out || print 'encoder tests:   0 passed,  0 failed'))

			typeset -f after-run >/dev/null && after-run

			print -f 'pass %3d; fail %3d; took %5ss\n' \
				$(( $v[3] + $iv[3] + $e[3] )) $(( $v[5] + $iv[5] + $e[5] )) $took
		)
	done
}

do_perf() {
	print -f '%-27s %-27s %s\n' '' '10k' '5M'
	for f in ./parsers/*.zsh; do
		name=$f:t:r
		out=output/$name.html
		[[ -n $only && $name != $only ]] && continue

		(
			print -nf '%-25s' $name
			source $f
			if (( ${info[skip]:-0} )); then
				print '(skip)'
				continue
			fi
			if [[ ${info[perf]:-TODO} = 'TODO' ]]; then
				print '(TODO)'
				continue
			fi

			skip=($(sed '/==> ENCODER TESTS/q; /FAIL/p; d;' $out | grep -Eo '>valid/.*?<' | sed 's/>/-skip /; s/</.toml/'))
			[[ $name = 'c-tomlc99' ]] && skip+=(-skip valid/string/multiline-quotes.toml)
			tmp5M=$(mktemp)
			tmp10k=$(mktemp)
			toml-test -cat 10              $skip >|$tmp10k
			toml-test -cat $(( 1024 * 5 )) $skip >|$tmp5M

			n_10k=50
			n_5M=3
			# Rather slow
			if [[ $name = python-tomlkit ]] || [[ $name = fortran-toml-f ]]; then
				n_10k=20
				n_5M=1
			fi
			# Ridiculously slow
			if [[ $name = ruby-toml-rb ]]; then
				n_10k=10
				n_5M=1
			fi

			perf=$info[perf]
			[[ $perf[1] != '.' ]] && perf=./src/$name/$perf

			dist_10k=(9999 0)
			dist_5M=(9999 0)
			took_perf10k=$($=perf $tmp10k 2>&/dev/null || print -1)
			took_perf5M=$($=perf $tmp5M   2>&/dev/null || print -1)
			if (( $took_perf10k == -1 )); then
				took_perf10k='(error)'; dist_10k=(0 0)
			fi
			if (( $took_perf5M == -1 )); then
				took_perf5M='(error)'; dist_5M=(0 0)
			fi
			if [[ $took_perf10k != '(error)' ]]; then
				all=($took_perf10k)
				# Warmup
				for (( i=0; i<$n_10k; i++ )); $=perf $tmp10k 2>&1 >/dev/null

				for (( i=0; i<$n_10k; i++ )); do
					r=$($=perf $tmp10k 2>&/dev/null || print -1)
					if (( $r == -1 )); then
						took_perf10k='(error)'; dist_10k=(0 0)
						break
					fi
					all+=($r)
					(( $r < $dist_10k[1] )) && dist_10k[1]=$r
					(( $r > $dist_10k[2] )) && dist_10k[2]=$r
				done
				if [[ $took_perf10k != '(error)' ]]; then
					float sum
					for a in $all; sum+=$a
					took_perf10k=$(print -nf '%.1f' $(( $sum / $#all * 1000 )))
					dist_10k[1]=$(print -nf '%.2f' $(( $dist_10k[1] * 1000 )))
					dist_10k[2]=$(print -nf '%.2f' $(( $dist_10k[2] * 1000 )))
				fi
			fi
			if [[ $took_perf5M != '(error)' ]]; then
				all=($took_perf5M)
				for (( i=0; i<$n_5M; i++ )); do
					r=$($=perf $tmp5M 2>&/dev/null || print -1)
					if (( $r == -1 )); then
						took_perf5M='(error)'; dist_5M=(0 0)
						break
					fi
					all+=($r)
					(( $r < $dist_5M[1] )) && dist_5M[1]=$r
					(( $r > $dist_5M[2] )) && dist_5M[2]=$r
				done
				if [[ $took_perf5M != '(error)' ]]; then
					float sum
					for a in $all; sum+=$a
					took_perf5M=$(print -nf '%.2f' $(( $sum / $#all )))
					dist_5M[1]=$(print -nf '%.2f' $dist_5M[1])
					dist_5M[2]=$(print -nf '%.2f' $dist_5M[2])
				fi
			fi

			copy=$(mktemp)
			sed -E "s/^took [0-9.]+ [0-9.]+$/took $took_perf10k $took_perf5M/" $out >|$copy
			mv $copy $out

			print -f '%6sms %-18s  %6ss %s\n' $took_perf10k "($dist_10k[1]ms $dist_10k[2]ms)" \
				$took_perf5M "($dist_5M[1]s $dist_5M[2]s)"
			rm -f $tmp10k $tmp5M
		)
	done
}

do_gen() {
	cat >|index.html <<-EOF
		<!DOCTYPE html>
		<html>
		<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<title>TOML test matrix</title>
		<style>
			html         { background-color:#eee; font:18px/1.5em sans-serif; }
			body         { background-color:#fff; padding:1em; max-width:80em; margin:1em auto; overflow-y:scroll; }
			small, em    { font-size:.75em; }
			table        { border-collapse:collapse; }
			td, th       { border:1px solid #d7d7d7; padding:.5em;  }
			td:nth-child(2) { white-space:nowrap; }
			th           { background:#f3f3f3; font-weight:normal; text-align:left; white-space:nowrap; }
			tr:hover     { background-color:#fffef1; }
			.pass        { }
			.fail        { float:right; }
			.didfail     { font-weight:bold; color:red; }
			.bench       { text-align:right; }
			a            { text-decoration:none; }
			a:hover      { text-decoration:underline; }
			.ui:visited  { color:LinkText; text-decoration:none; }
			.bars        { height:.5em; line-height:0; }
			.barp, .barf { display:inline-block; height:.5em; }
			.barp        { background:#e1e1e1; color:#fff; }
			.barf        { background:red; color:#fff; text-align:right;}
			.allpass     {  }
			#langs       { text-align:right; margin-bottom:.5em; display:none; }
			label        { margin-right:.4em; }
		</style>
		</head>
		<body>
		<p>This tests various parsers agains the
		<a href="https://github.com/toml-lang/toml-test">toml-test</a>
		suite. It doesn't include all parsers (yet), see
		<a href="https://github.com/toml-lang/toml/wiki">the wiki</a>
		for a full list.</p>

		<p>There are three kinds of tests: "decoder tests" test if valid TOML
		documents are processed correctly, "encoder tests" tests writing TOML
		files (if supported), and "invalid input" tests that the parser rejects
		invalid TOML documents. Implementations are marked as "compliant" (✅)
		if both the "valid" and "encoder" tests pass, otherwise they're marked
		as non-compliant (❌). Usually it's not a huge deal to accept some
		technically invalid TOML, especially since almost all failing "invalid"
		tests are uncommon edge cases.</p>

		<p>The benchmarks are a simple decode of a 10k and 5M file. Results
		aren't necessarily fair as some implementations will parse numbers,
		dates, etc. when reading the file, and others when the data is used. The
		benchmarks are also simplistic: it just runs once on my laptop. The
		results are roughly consistent, but do have some margin of error (±20%
		or so for the 10k file). Still, it should be a decent rough comparison.
		If performance is of prime concern you should run your own benchmarks
		based on your real-world use case in any case.</p>

		<div id="langs">Only show:
	EOF

	: >|output/index.html

	typeset -A langs=()
	for f in ./parsers/*.zsh; do
		source $f
		(( ${info[skip]:-0} )) && continue
		: $(( langs[$info[lang]]++ ))
	done
	for l in ${(ok)langs}; do
		print "<label><input type='checkbox' value='$l'>$l ($langs[$l])</label>" >>index.html
	done

	cat >>index.html <<-EOF
		</div>
		<table>
		<thead><tr>
		<th></th>
		<th></th>
		<th>Name</th>
		<th>Decoder tests</th>
		<th>Encoder tests</th>
		<th>Invalid input</th>
		<th>10k file</th>
		<th>5M file</th>
		<th></th>
		</tr></thead>
		<tbody>
	EOF

	for f in ./parsers/*.zsh; do
		name=$f:t:r
		out=output/$name.html

		source $f
		(( ${info[skip]:-0} )) && continue

		print "<a href='$name.html'>$name.html</a><br>" >>output/index.html

		v=($(grep -a '^  valid tests:' $out))
		iv=($(grep -a '^invalid tests:' $out))
		e=($(grep -a '^encoder tests:' $out || print 'encoder tests:   0 passed,  0 failed'))

		took10k=$(tail -n2 $out | grep '^took' | cut -d' ' -f2)
		[[ $took10k != '(error)' ]] && took10k+=ms
		took5M=$(tail -n2 $out | grep '^took' | cut -d' ' -f3)
		[[ $took5M != '(error)' ]] && took5M+=s

		[[ -z $info[version] ]] && info[version]=$(cd src/$name && git log -n1 --format=%h)

		vfail=""
		(( $v[5] > 0 ))  && vfail='didfail'
		ifail=""
		(( $iv[5] > 0 )) && ifail='didfail'
		efail=""
		(( $e[5] > 0 ))  && efail='didfail'

		compliant='<span title="Non-compliant">❌</span>'
		(( $v[5] == 0 && $e[5] == 0 )) && compliant='<span title="Compliant">✅</span>'

		failvw=0; failiw=0; faile=0;
		passvw=100; passiw=100; passe=100
		allv=allpass; alli=allpass; alle=allpass

		if (( $v[5] > 0 )); then
			failvw=$(( $v[5].0 / ($v[3] + $v[5]) * 100 ))
			passvw=$(( 100 - $failvw ))
			allv=
		fi
		if (( $iv[5] > 0 )); then
			failiw=$(( $iv[5].0 / ($iv[3] + $iv[5]) * 100 ))
			passiw=$(( 100 - $failiw ))
			alli=
		fi
		if (( $e[5] > 0 )); then
			faile=$(( $e[5].0 / ($e[3] + $e[5]) * 100 ))
			passe=$(( 100 - $faile ))
			alle=
		fi
		cat >>index.html <<-EOF
			<tr data-lang="$info[lang]">
				<td>$compliant</td>
				<td>$info[lang]</td>
				<td title="Version $info[version]"><a href="$info[site]">${name#*-}</a></td>
				<td style="width:30em">
					<div class="bars">
						<span class="barp $allv" style="width:$passvw%"></span><span class="barf" style="width:$failvw%"></span>
					</div>
					<small class="pass">pass: $v[3]</small>
					<span class="fail $vfail">fail: $v[5]</span>
				</td>
		EOF
		if (( $e[3] > 0 || $e[5] > 0 )); then
			cat >>index.html <<-EOF
				<td style="width:30em">
					<div class="bars">
						<span class="barp $alle" style="width:$passe%"></span><span class="barf" style="width:$faile%"></span>
					</div>
					<small class="pass">pass: $e[3]</small>
					<span class="fail $efail">fail: $e[5]</span>
				</td>
			EOF
		else
			# TODO: quick hack to ensure we don't lie.
			if [[ $info[encoder] = 'TODO' ]]; then
				echo "<td style='width:30em'><em>(TODO)</em></td>" >>index.html
			else
				echo "<td style='width:30em'><em>(doesn't include encoder)</em></td>" >>index.html
			fi
		fi
		cat >>index.html <<-EOF
				<td style="width:30em">
					<div class="bars">
						<span class="barp $alli" style="width:$passiw%"></span><span class="barf" style="width:$failiw%"></span>
					</div>
					<small class="pass">pass: $iv[3]</small>
					<span class="fail $ifail">fail: $iv[5]</span>
				</td>
		EOF
		if [[ $took10k = '0.0ms' ]]; then
			print "<td class='bench'><em>(TODO)</em></td>" >>index.html
		elif [[ $took10k = '(error)' ]]; then
			print "<td class='bench'><em>$took10k</em></td>" >>index.html
		else
			print "<td class='bench'>$took10k</td>" >>index.html
		fi
		if [[ $took5M = '0.0s' ]]; then
			print "<td class='bench'><em>(TODO)</em></td>" >>index.html
		elif [[ $took5M = '(error)' ]]; then
			print "<td class='bench'><em>$took5M</em></td>" >>index.html
		else
			print "<td class='bench'>$took5M</td>"  >>index.html
		fi

		cat >>index.html <<-EOF
			<td><a href="output/$name.html" class="ui">output</a></td>
			</tr>
		EOF
	done

	cat >>index.html <<-EOF
		</tbody></table>
		<p style="float:right; font-size:.75em; padding-top:.5em;">
			<a href="https://github.com/arp242/toml-test-matrix">https://github.com/arp242/toml-test-matrix</a>
		</p>
		<script>
			window.langs.style.display = 'block'

			let checks = document.querySelectorAll('input'),
				rows   = document.querySelectorAll('tbody tr')
			window.langs.addEventListener('click', (e) => {
				if (e.target.tagName !== 'INPUT')
					return
				let boxes = {},
					v     = false
				checks.forEach((elem) => boxes[elem.value] = elem.checked)
				rows.forEach((elem) => {
					elem.style.display = boxes[elem.dataset.lang] ? '' : 'none'
					v = v || boxes[elem.dataset.lang]
				})
				if (!v)
					rows.forEach((elem) => elem.style.display = '')
			})
		</script>
		</body></html>
	EOF
}

only=${2:-}
case ${1:-all}; in
	setup) do_setup ;;
	run)   do_run   ;;
	perf)  do_perf  ;;
	gen)   do_gen   ;;
	all)   do_setup && do_run && do_gen ;;
	*)
		print "unknown step: $1"
		exit 1
esac
